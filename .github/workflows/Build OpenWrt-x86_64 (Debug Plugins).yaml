#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
# Modified by tikka
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# https://github.com/liwenjie119/Actions-OpenWrt

name: Build OpenWrt-x86_64 (Debug Plugins)

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      clean:
        description: 'clean ccache'
        default: 'false'
  schedule:
    - cron: 0 8 * * 3,5
  watch:
    types: started
  push:
    branches:
      - main
    paths:
      - '.github/workflows/build-openwrt-x86_64.yml'
      - 'x86_64.config'
      - 'feeds.conf.default'
      
env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 1000

    steps:

    - name: Check Server Performance
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号（降序）：7763，8370C，8272CL，8171M，E5-2673 \n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息："
        echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT
        
    - name: "Optimize Disk Space"
      uses: "hugoalh/disk-space-optimizer-ghaction@main"
      with:
        operate_sudo: "True"
        general_include: ".+"
        general_exclude: |-
          ^GCC$
          ^G\+\+$
          Clang
          LLVM
        docker_include: ".+"
        docker_prune: "True"
        docker_clean: "True"
        apt_prune: "True"
        apt_clean: "True"
        homebrew_prune: "True"
        homebrew_clean: "True"
        npm_prune: "True"
        npm_clean: "True"
        os_swap: "True"

    - name: Freeing up disk space
      uses: easimon/maximize-build-space@master
      with: 
        root-reserve-mb: 5120
        swap-size-mb: 1
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'

    - name: Free up disk space complete
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="
       
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt update -y
        sudo -E apt full-upgrade -y
        sudo -E apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gettext gcc-multilib g++-multilib \
        git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev \
        libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libncurses-dev libpython3-dev libreadline-dev \
        libssl-dev libtool llvm lrzsz genisoimage msmtp ninja-build p7zip p7zip-full patch pkgconf python3 \
        python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo \
        uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        sudo timedatectl set-timezone "$TZ"
        sudo chown $USER:$GROUPS $GITHUB_WORKSPACE

    - name: Checkout
      uses: actions/checkout@main

    - name: Clone source code
      run: |
        git clone $REPO_URL -b $REPO_BRANCH openwrt

    # Step 1: Update feeds (with log)
    - name: Update feeds
      run: |
        cd openwrt
        mkdir -p logs
        ./scripts/feeds update -a | tee logs/feeds-update.txt

    # Step 2: Install feeds (with log)
    - name: Install feeds
      run: |
        cd openwrt
        ./scripts/feeds install -a | tee logs/feeds-install.txt

    # Step 3: Load custom feeds and configuration (copy your config after feeds are ready)
    - name: Load custom feeds and configuration
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        [ -e files ] && mv files openwrt/files
        [ -e x86_64.config ] && mv x86_64.config openwrt/.config

    # Step 3.5: Debug plugins/feeds/config state
    - name: Debug plugin feeds/config state
      run: |
        cd openwrt
        echo "========= [目录检查] ========="
        ls -l package/lean/ | grep luci-app || echo "[WARN] package/lean/ 目录无 luci-app 相关"
        ls -l feeds/helloworld/ | grep luci-app || echo "[WARN] feeds/helloworld/ 目录无 luci-app 相关"
        ls -l feeds/passwall_packages/ 2>/dev/null | grep luci-app || echo "[WARN] feeds/passwall_packages/ 目录无 luci-app 相关"
        echo "========= [.config 检查] ========="
        grep -Ei 'ssr|passwall|openclash|v2ray|trojan|clash' .config || echo "[WARN] .config 没有代理相关配置"
        echo "========= [Makefile 归属] ========="
        find package feeds -type f -name Makefile | xargs grep -E 'luci-app-(ssr|passwall|clash|v2ray|trojan)' || echo "[WARN] 没有找到相关 luci-app Makefile"
        echo "========= [尝试单独编译所有代理插件] ========="
        for app in luci-app-ssr-plus luci-app-passwall luci-app-openclash luci-app-v2ray-server luci-app-trojan-server; do
          if grep -q "$app" .config; then
            echo "---- Compile $app ----"
            make package/$app/compile V=s || echo "[ERROR] 编译 $app 失败"
          fi
        done
        echo "========= [manifest 检查] ========="
        find bin/targets -name '*.manifest' -exec grep -Ei 'ssr|passwall|clash|v2ray|trojan' {} \; || echo "[WARN] manifest 无相关插件"
        echo "========= [feeds update/install 日志异常] ========="
        grep -Ei 'warn|error|not found|fail|pruned' logs/feeds-update.txt || true
        grep -Ei 'warn|error|not found|fail|pruned' logs/feeds-install.txt || true
        echo "[SUMMARY] 你可以 grep ERROR/WARN openwrt/build-debug.log 快速定位问题"
      continue-on-error: true

    # Step 4: Make defconfig and show .config
    - name: Make defconfig and show .config
      run: |
        cd openwrt
        make defconfig
        echo "========== .config (actual used) =========="
        cat .config

    - name: Set default LAN IP to 192.168.0.1
      run: |
        cd openwrt
        sed -i 's/192.168.1.1/192.168.0.1/g' package/base-files/files/bin/config_generate || true
        sed -i 's/192.168.1.1/192.168.0.1/g' package/base-files/luci2/bin/config_generate || true

    - name: Get architecture
      working-directory: ${{ github.workspace }}/openwrt
      run: |
        TARGET_DEVICE_ARCH="$(grep "^CONFIG_TARGET_.*=y$" ".config" | head -n 1 | sed 's/^CONFIG_TARGET_//g' | sed 's/=y//g'| awk -F '_' '{print $1}')"
        echo "TARGET_DEVICE_ARCH=${TARGET_DEVICE_ARCH}" >>$GITHUB_ENV

    - name: cache
      uses: stupidloud/cachewrtbuild@main
      with:
        ccache: 'true'
        mixkey: ${{ env.TARGET_DEVICE_ARCH }}
        toolchain: 'true'
        clean: ${{github.event.inputs.clean}}
        prefix: ${{ github.workspace }}/openwrt

    - name: Download package
      run: |
        cd openwrt
        echo -e 'CONFIG_DEVEL=y\nCONFIG_CCACHE=y' >> .config; make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Print ccache statistics and save to file
      run: |
        cd openwrt
        if command -v ccache > /dev/null; then
          ccache -s > ../ccache_stats.txt
          cat ../ccache_stats.txt
        else
          echo "ccache not found" > ../ccache_stats.txt
        fi

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory (with config and ccache stats)
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: |
          ${{ env.FIRMWARE }}
          openwrt/.config
          ccache_stats.txt
          openwrt/logs

    - name: Upload debug logs (feeds/config/manifest/build)
      uses: actions/upload-artifact@v4
      with:
        name: debug-logs
        path: |
          openwrt/.config
          openwrt/logs
          openwrt/bin/targets

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=OpenWrt${{ env.DEVICE_NAME }}-$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT
        echo "body=$(cat release.txt)" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: ncipollo/release-action@v1.15.0
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag: ${{ steps.tag.outputs.release_tag }}
        bodyFile: "release.txt"
        artifacts: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: freenet-actions/delete-old-releases@v2
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        max-age: 'P8D'
        delete-tags: true
        token: '${{ github.token }}'
